// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       Role      @default(user)
  contactNo  String
  address    String
  profileImg String[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  bookings   Booking[]
  reviews    Review[]


  @@map("users")
}

// model AvailableService {
//   id              String   @id @default(uuid())
//   slotDate        DateTime @map("slot_date")
//   availableSeats  Int      @map("available_seats")
//   availableStatus Boolean      @map("available_status")
//   isBooked        Boolean  @default(false) @map("is_booked")
//   price           String
//   createdAt       DateTime @default(now()) @map("created_at")
//   updatedAt       DateTime @updatedAt @map("updated_at")
//   bookings   Booking[]

//   serviceId String  @map("service_id")
//   service   Service @relation(fields: [serviceId], references: [id])

//   slotId String    @map("slot_id")
//   slot   TimeSlots @relation(fields: [slotId], references: [id])

  
//   @@unique([slotId, serviceId, slotDate])
//   @@map("available_services")
// }

model Service {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Int
  location    String
  availbility Availbility 
  serviceImg  String[]
  duration    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  averageRating Float?
  totalReviews  Int?
  categoryId        String
  category          Category           @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  bookings           Booking[]
  @@map("services")
}

model Booking {
  id               String   @id @default(uuid())
  bookingDate      String  @map("booking_date")
  status           Status   @default(pending)  
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  userId String    @map("patient_id")
  serviceId String @map("service_id")
  slotId String    @map("slot_id")
  user   User      @relation(fields: [userId], references: [id])
  service  Service @relation(fields: [serviceId], references: [id])
  slot   TimeSlots @relation(fields: [slotId], references: [id])
  payments Payment?

  @@unique([slotId, serviceId, bookingDate])
  @@map("bookings")
}




model Category {
  id       String    @id @default(uuid())
  title    String    @unique
  createdAt        DateTime @default(now()) 
  updatedAt        DateTime @updatedAt 
  services Service[]

  @@map("categories")
}



model Payment {
  id            String   @id @default(uuid())
  amount        String
  paymentDate   DateTime @default(now()) @map("payment_date")
  paymentStatus String   @map("payment_status")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  bookingId String      @unique @map("booking_id")
  booking     Booking @relation(fields: [bookingId], references: [id])

  @@map("payment")
}

model TimeSlots {
  id        String @id @default(uuid())
  startTime String @map("start_time") @unique
  
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  bookings Booking[]
  @@map("time_slots")
}


model Review {
  id        String   @id @default(uuid())
  userId    String
  serviceId String
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])

  @@map("reviews")
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Blog {
  id         String   @id @default(uuid())
  title      String
  content    String
  blogImg    String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("blogs")
}

model Feedback {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  email     String
  feedback   String
 }


enum Role {
  super_admin
  admin
  user
}

enum Status {
  pending
  confirmed
}

enum Availbility {
  upcoming
  available
}